{"version":3,"file":"gridster.service.js","sourceRoot":"","sources":["../../../../../../projects/angular2gridster/src/lib/gridster.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { GridList } from './gridList/gridList';\r\nimport { IGridsterOptions } from './IGridsterOptions';\r\nimport { IGridsterDraggableOptions } from './IGridsterDraggableOptions';\r\nimport { GridListItem } from './gridList/GridListItem';\r\nimport { GridsterComponent } from './gridster.component';\r\nimport { GridsterOptions } from './GridsterOptions';\r\n\r\n@Injectable()\r\nexport class GridsterService {\r\n    $element: HTMLElement;\r\n\r\n    gridList: GridList;\r\n\r\n    items: Array<GridListItem> = [];\r\n    _items: Array<GridListItem> = [];\r\n    _itemsMap: { [breakpoint: string]: Array<GridListItem> } = {};\r\n    disabledItems: Array<GridListItem> = [];\r\n\r\n    options: IGridsterOptions;\r\n    draggableOptions: IGridsterDraggableOptions;\r\n\r\n    gridsterRect: ClientRect;\r\n    gridsterScrollData: { scrollTop: number, scrollLeft: number };\r\n\r\n    gridsterOptions: GridsterOptions;\r\n\r\n    gridsterComponent: GridsterComponent;\r\n\r\n    debounceRenderSubject = new Subject();\r\n\r\n    public $positionHighlight: HTMLElement;\r\n\r\n    public maxItemWidth: number;\r\n    public maxItemHeight: number;\r\n\r\n    public cellWidth: number;\r\n    public cellHeight: number;\r\n\r\n    public itemRemoveSubject: Subject<GridListItem> = new Subject();\r\n\r\n    private _fontSize: number;\r\n\r\n    private previousDragPosition: Array<number>;\r\n    private previousDragSize: Array<number>;\r\n\r\n    private currentElement: HTMLElement;\r\n\r\n    private _maxGridCols: number;\r\n\r\n    private isInit = false;\r\n\r\n    constructor() {\r\n        this.itemRemoveSubject.pipe(debounceTime(0)).subscribe(() => {\r\n            this.gridList.pullItemsToLeft();\r\n            this.render();\r\n            this.updateCachedItems();\r\n        });\r\n\r\n        this.debounceRenderSubject.pipe(debounceTime(0)).subscribe(() => this.render());\r\n    }\r\n\r\n    isInitialized(): boolean {\r\n        return this.isInit;\r\n    }\r\n\r\n    /**\r\n     * Must be called before init\r\n     * @param item\r\n     */\r\n    registerItem(item: GridListItem) {\r\n\r\n        this.items.push(item);\r\n        return item;\r\n    }\r\n\r\n    init(gridsterComponent: GridsterComponent) {\r\n\r\n        this.gridsterComponent = gridsterComponent;\r\n\r\n        this.draggableOptions = gridsterComponent.draggableOptions;\r\n\r\n        this.gridsterOptions = gridsterComponent.gridsterOptions;\r\n    }\r\n\r\n    start() {\r\n        this.updateMaxItemSize();\r\n\r\n        // Used to highlight a position an element will land on upon drop\r\n        if (this.$positionHighlight) {\r\n            this.removePositionHighlight();\r\n        }\r\n\r\n        this.initGridList();\r\n\r\n        this.isInit = true;\r\n\r\n        setTimeout(() => {\r\n            this.copyItems();\r\n            this.fixItemsPositions();\r\n\r\n            this.gridsterComponent.reflowGridster(true);\r\n            this.gridsterComponent.setReady();\r\n        });\r\n    }\r\n\r\n    initGridList() {\r\n        // Create instance of GridList (decoupled lib for handling the grid\r\n        // positioning and sorting post-drag and dropping)\r\n        this.gridList = new GridList(this.items, this.options);\r\n    }\r\n\r\n    render() {\r\n        this.updateMaxItemSize();\r\n        this.gridList.generateGrid();\r\n        this.applySizeToItems();\r\n        this.applyPositionToItems();\r\n        this.refreshLines();\r\n    }\r\n\r\n    reflow() {\r\n        this.calculateCellSize();\r\n        this.render();\r\n    }\r\n\r\n    fixItemsPositions() {\r\n        if (this.options.responsiveSizes) {\r\n            this.gridList.fixItemsPositions(this.options);\r\n        } else {\r\n            this.gridList.fixItemsPositions(this.gridsterOptions.basicOptions);\r\n            this.gridsterOptions.responsiveOptions.forEach((options: IGridsterOptions) => {\r\n                this.gridList.fixItemsPositions(options);\r\n            });\r\n        }\r\n\r\n        this.updateCachedItems();\r\n    }\r\n\r\n    removeItem(item: GridListItem) {\r\n        const idx = this.items.indexOf(item);\r\n\r\n        if (idx >= 0) {\r\n            this.items.splice(this.items.indexOf(item), 1);\r\n        }\r\n\r\n        this.gridList.deleteItemPositionFromGrid(item);\r\n        this.removeItemFromCache(item);\r\n    }\r\n\r\n    onResizeStart(item: GridListItem) {\r\n        this.currentElement = item.$element;\r\n\r\n        this.copyItems();\r\n\r\n        this._maxGridCols = this.gridList.grid.length;\r\n\r\n        this.highlightPositionForItem(item);\r\n\r\n        this.gridsterComponent.isResizing = true;\r\n\r\n        this.refreshLines();\r\n    }\r\n\r\n    onResizeDrag(item: GridListItem) {\r\n        const newSize = this.snapItemSizeToGrid(item);\r\n        const sizeChanged = this.dragSizeChanged(newSize);\r\n        const newPosition = this.snapItemPositionToGrid(item);\r\n        const positionChanged = this.dragPositionChanged(newPosition);\r\n\r\n        if (sizeChanged || positionChanged) {\r\n            // Regenerate the grid with the positions from when the drag started\r\n            this.restoreCachedItems();\r\n            this.gridList.generateGrid();\r\n\r\n            this.previousDragPosition = newPosition;\r\n            this.previousDragSize = newSize;\r\n\r\n            this.gridList.moveAndResize(item, newPosition, {w: newSize[0], h: newSize[1]});\r\n\r\n            // Visually update item positions and highlight shape\r\n            this.applyPositionToItems(true);\r\n            this.applySizeToItems();\r\n            this.highlightPositionForItem(item);\r\n            this.refreshLines();\r\n        }\r\n    }\r\n\r\n    onResizeStop(item: GridListItem) {\r\n        this.currentElement = undefined;\r\n        this.updateCachedItems();\r\n        this.previousDragSize = null;\r\n\r\n        this.removePositionHighlight();\r\n\r\n        this.gridsterComponent.isResizing = false;\r\n\r\n        this.gridList.pullItemsToLeft(item);\r\n        this.debounceRenderSubject.next();\r\n\r\n        this.fixItemsPositions();\r\n    }\r\n\r\n    onStart(item: GridListItem) {\r\n        this.currentElement = item.$element;\r\n        // itemCtrl.isDragging = true;\r\n        // Create a deep copy of the items; we use them to revert the item\r\n        // positions after each drag change, making an entire drag operation less\r\n        // distructable\r\n        this.copyItems();\r\n\r\n        // Since dragging actually alters the grid, we need to establish the number\r\n        // of cols (+1 extra) before the drag starts\r\n\r\n        this._maxGridCols = this.gridList.grid.length;\r\n\r\n        this.gridsterComponent.isDragging = true;\r\n        this.gridsterComponent.updateGridsterElementData();\r\n\r\n        this.refreshLines();\r\n    }\r\n\r\n    onDrag(item: GridListItem) {\r\n        const newPosition = this.snapItemPositionToGrid(item);\r\n\r\n        if (this.dragPositionChanged(newPosition)) {\r\n\r\n            // Regenerate the grid with the positions from when the drag started\r\n            this.restoreCachedItems();\r\n            this.gridList.generateGrid();\r\n\r\n            this.previousDragPosition = newPosition;\r\n            if (this.options.direction === 'none' &&\r\n                !this.gridList.checkItemAboveEmptyArea(item, {x: newPosition[0], y: newPosition[1]})) {\r\n                return;\r\n            }\r\n\r\n            // Since the items list is a deep copy, we need to fetch the item\r\n            // corresponding to this drag action again\r\n            this.gridList.moveItemToPosition(item, newPosition);\r\n\r\n            // Visually update item positions and highlight shape\r\n            this.applyPositionToItems(true);\r\n            this.highlightPositionForItem(item);\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.restoreCachedItems();\r\n        this.previousDragPosition = null;\r\n        this.updateMaxItemSize();\r\n        this.applyPositionToItems();\r\n        this.removePositionHighlight();\r\n        this.currentElement = undefined;\r\n        this.gridsterComponent.isDragging = false;\r\n    }\r\n\r\n    onDragOut (item: GridListItem) {\r\n\r\n        this.cancel();\r\n\r\n        const idx = this.items.indexOf(item);\r\n        if (idx >= 0) {\r\n            this.items.splice(idx, 1);\r\n        }\r\n\r\n        this.gridList.pullItemsToLeft();\r\n        this.render();\r\n    }\r\n\r\n    onStop(item: GridListItem) {\r\n        this.currentElement = undefined;\r\n        this.updateCachedItems();\r\n        this.previousDragPosition = null;\r\n\r\n        this.removePositionHighlight();\r\n\r\n        this.gridList.pullItemsToLeft(item);\r\n\r\n        this.gridsterComponent.isDragging = false;\r\n\r\n        this.refreshLines();\r\n    }\r\n\r\n    calculateCellSize() {\r\n        if (this.options.direction === 'horizontal') {\r\n            this.cellHeight = this.calculateCellHeight();\r\n            this.cellWidth = this.options.cellWidth || this.cellHeight * this.options.widthHeightRatio;\r\n        } else {\r\n            this.cellWidth = this.calculateCellWidth();\r\n            this.cellHeight = this.options.cellHeight || this.cellWidth / this.options.widthHeightRatio;\r\n        }\r\n        if (this.options.heightToFontSizeRatio) {\r\n            this._fontSize = this.cellHeight * this.options.heightToFontSizeRatio;\r\n        }\r\n    }\r\n\r\n    applyPositionToItems(increaseGridsterSize?: boolean) {\r\n        if (!this.options.shrink) {\r\n            increaseGridsterSize = true;\r\n        }\r\n        // TODO: Implement group separators\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            // Don't interfere with the positions of the dragged items\r\n            if (this.isCurrentElement(this.items[i].$element)) {\r\n                continue;\r\n            }\r\n            this.items[i].applyPosition(this);\r\n        }\r\n\r\n        const child = <HTMLElement>this.gridsterComponent.$element.firstChild;\r\n        // Update the width of the entire grid container with enough room on the\r\n        // right to allow dragging items to the end of the grid.\r\n        if (this.options.direction === 'horizontal') {\r\n            const increaseWidthWith = (increaseGridsterSize) ? this.maxItemWidth : 0;\r\n            child.style.height = '';\r\n            child.style.width = ((this.gridList.grid.length + increaseWidthWith) * this.cellWidth) + 'px';\r\n\r\n        } else if (this.gridList.grid.length) {\r\n            // todo: fix me\r\n            const rowHeights = this.getRowHeights();\r\n            const rowTops = this.getRowTops(rowHeights);\r\n            const height = rowTops[rowTops.length - 1] + rowHeights[rowHeights.length - 1];\r\n            const previousHeight = child.style.height;\r\n            child.style.height = height + 'px';\r\n            child.style.width = '';\r\n\r\n            if (previousHeight !== child.style.height) {\r\n                this.refreshLines();\r\n            }\r\n        }\r\n    }\r\n\r\n    getRowHeights(): number[] {\r\n        const result = [];\r\n        for (let row = 0; row < this.gridList.grid.length; row++) {\r\n            result.push(0);\r\n            for (let column = 0; column < this.gridList.grid[row].length; column++) {\r\n                const item = this.gridList.grid[row][column];\r\n                if (item) {\r\n                    const height = item.contentHeight / item.h;\r\n                    if (item.variableHeight && height > result[row]) {\r\n                        result[row] = height;\r\n                    }\r\n                }\r\n            }\r\n            if (result[row] === 0) {\r\n                result[row] = this.cellHeight;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRowTops(rowHeights: number[]): number[] {\r\n        const result = [];\r\n        let lastHeight = 0;\r\n        for (const rowHeight of rowHeights) {\r\n            result.push(lastHeight);\r\n            lastHeight += rowHeight;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    refreshLines() {\r\n        const canvas = <HTMLCanvasElement>this.gridsterComponent.$backgroundGrid.nativeElement;\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        const canvasContext = canvas.getContext('2d');\r\n\r\n        canvasContext.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (this.options.lines && this.options.lines.visible &&\r\n            (this.gridsterComponent.isDragging || this.gridsterComponent.isResizing || this.options.lines.always)) {\r\n            const linesColor = this.options.lines.color || '#d8d8d8';\r\n            const linesBgColor = this.options.lines.backgroundColor || 'transparent';\r\n            const linesWidth = this.options.lines.width || 1;\r\n\r\n            canvasContext.fillStyle = linesBgColor;\r\n            canvasContext.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            canvasContext.strokeStyle = linesColor;\r\n            canvasContext.lineWidth = linesWidth;\r\n\r\n            canvasContext.beginPath();\r\n            // draw row lines\r\n            const rowHeights = this.getRowHeights();\r\n            const rowTops = this.getRowTops(rowHeights);\r\n            for (let i = 0; i < rowTops.length; i++) {\r\n                canvasContext.moveTo(0, rowTops[i]);\r\n                canvasContext.lineTo(canvas.width, rowTops[i]);\r\n            }\r\n            // draw column lines\r\n            for (let i = 0; i < this.options.lanes; i++) {\r\n                canvasContext.moveTo(i * this.cellWidth, 0);\r\n                canvasContext.lineTo(i * this.cellWidth, canvas.height);\r\n            }\r\n            canvasContext.stroke();\r\n            canvasContext.closePath();\r\n        }\r\n    }\r\n\r\n    private removeItemFromCache(item: GridListItem) {\r\n        this._items = this._items\r\n            .filter(cachedItem => cachedItem.$element !== item.$element);\r\n\r\n        Object.keys(this._itemsMap)\r\n            .forEach((breakpoint: string) => {\r\n                this._itemsMap[breakpoint] = this._itemsMap[breakpoint]\r\n                    .filter(cachedItem => cachedItem.$element !== item.$element);\r\n            });\r\n    }\r\n\r\n    private copyItems(): void {\r\n        this._items = this.items\r\n            .filter(item => this.isValidGridItem(item))\r\n            .map((item: GridListItem) => {\r\n                return item.copyForBreakpoint(null);\r\n            });\r\n\r\n        this.gridsterOptions.responsiveOptions.forEach((options: IGridsterOptions) => {\r\n            this._itemsMap[options.breakpoint] = this.items\r\n                .filter(item => this.isValidGridItem(item))\r\n                .map((item: GridListItem) => {\r\n                    return item.copyForBreakpoint(options.breakpoint);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update maxItemWidth and maxItemHeight vales according to current state of items\r\n     */\r\n    private updateMaxItemSize() {\r\n        this.maxItemWidth = Math.max.apply(\r\n            null, this.items.map((item) => {\r\n                return item.w;\r\n            }));\r\n        this.maxItemHeight = Math.max.apply(\r\n            null, this.items.map((item) => {\r\n                return item.h;\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Update items properties of previously cached items\r\n     */\r\n    private restoreCachedItems() {\r\n        const items = this.options.breakpoint ? this._itemsMap[this.options.breakpoint] : this._items;\r\n\r\n        this.items\r\n            .filter(item => this.isValidGridItem(item))\r\n            .forEach((item: GridListItem) => {\r\n                const cachedItem: GridListItem = items.filter(cachedItm => {\r\n                    return cachedItm.$element === item.$element;\r\n                })[0];\r\n\r\n                item.x = cachedItem.x;\r\n                item.y = cachedItem.y;\r\n\r\n                item.w = cachedItem.w;\r\n                item.h = cachedItem.h;\r\n                item.autoSize = cachedItem.autoSize;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * If item should react on grid\r\n     * @param GridListItem item\r\n     * @returns boolean\r\n     */\r\n    private isValidGridItem(item: GridListItem): boolean {\r\n        if (this.options.direction === 'none') {\r\n            return !!item.itemComponent;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private calculateCellWidth() {\r\n        const gridsterWidth = parseFloat(window.getComputedStyle(this.gridsterComponent.$element).width);\r\n\r\n        return Math.floor(gridsterWidth / this.options.lanes);\r\n    }\r\n\r\n    private calculateCellHeight() {\r\n        const gridsterHeight = parseFloat(window.getComputedStyle(this.gridsterComponent.$element).height);\r\n\r\n        return Math.floor(gridsterHeight / this.options.lanes);\r\n    }\r\n\r\n    private applySizeToItems() {\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].applySize();\r\n\r\n            if (this.options.heightToFontSizeRatio) {\r\n                this.items[i].$element.style['font-size'] = this._fontSize;\r\n            }\r\n        }\r\n    }\r\n\r\n    private isCurrentElement(element: HTMLElement) {\r\n        if (!this.currentElement) {\r\n            return false;\r\n        }\r\n        return element === this.currentElement;\r\n    }\r\n\r\n    private snapItemSizeToGrid(item: GridListItem): [number, number] {\r\n        const itemSize = {\r\n            width: parseInt(item.$element.style.width, 10) - 1,\r\n            height: parseInt(item.$element.style.height, 10) - 1\r\n        };\r\n\r\n        let colSize = Math.round(itemSize.width / this.cellWidth);\r\n        let rowSize = Math.round(itemSize.height / this.cellHeight);\r\n\r\n        // Keep item minimum 1\r\n        colSize = Math.max(colSize, 1);\r\n        rowSize = Math.max(rowSize, 1);\r\n\r\n        // check if element is pinned\r\n        if (this.gridList.isOverFixedArea(item.x, item.y, colSize, rowSize, item)) {\r\n            return [item.w, item.h];\r\n        }\r\n\r\n        return [colSize, rowSize];\r\n    }\r\n\r\n    private generateItemPosition(item: GridListItem): { x: number, y: number } {\r\n        let position;\r\n\r\n        if (item.itemPrototype) {\r\n            const coords = item.itemPrototype.getPositionToGridster(this);\r\n            position = {\r\n                x: Math.round(coords.x / this.cellWidth),\r\n                y: Math.round(coords.y / this.cellHeight)\r\n            };\r\n        } else {\r\n            position = {\r\n                x: Math.round(item.positionX / this.cellWidth),\r\n                y: Math.round(item.positionY / this.cellHeight)\r\n            };\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    private snapItemPositionToGrid(item: GridListItem): [number, number] {\r\n        const position = this.generateItemPosition(item);\r\n        let col = position.x;\r\n        let row = position.y;\r\n\r\n        // Keep item position within the grid and don't let the item create more\r\n        // than one extra column\r\n        col = Math.max(col, 0);\r\n        row = Math.max(row, 0);\r\n\r\n        if (this.options.direction === 'horizontal') {\r\n            col = Math.min(col, this._maxGridCols);\r\n        } else {\r\n            col = Math.min(col, Math.max(0, this.options.lanes - item.w));\r\n        }\r\n\r\n        // check if element is pinned\r\n        if (this.gridList.isOverFixedArea(col, row, item.w, item.h)) {\r\n            return [item.x, item.y];\r\n        }\r\n\r\n        return [col, row];\r\n    }\r\n\r\n    private dragSizeChanged(newSize: [number, number]): boolean {\r\n        if (!this.previousDragSize) {\r\n            return true;\r\n        }\r\n        return (newSize[0] !== this.previousDragSize[0] ||\r\n            newSize[1] !== this.previousDragSize[1]);\r\n    }\r\n\r\n    private dragPositionChanged(newPosition: [number, number]): boolean {\r\n        if (!this.previousDragPosition) {\r\n            return true;\r\n        }\r\n        return (newPosition[0] !== this.previousDragPosition[0] ||\r\n            newPosition[1] !== this.previousDragPosition[1]);\r\n    }\r\n\r\n    private highlightPositionForItem(item: GridListItem) {\r\n        const size = item.calculateSize(this);\r\n        const position = item.calculatePosition(this);\r\n\r\n        this.$positionHighlight.style.width = size.width + 'px';\r\n        this.$positionHighlight.style.height = size.height + 'px';\r\n        this.$positionHighlight.style.left = position.left + 'px';\r\n        this.$positionHighlight.style.top = position.top + 'px';\r\n        this.$positionHighlight.style.display = '';\r\n\r\n        if (this.options.heightToFontSizeRatio) {\r\n            (<any>this.$positionHighlight.style)['font-size'] = this._fontSize;\r\n        }\r\n    }\r\n\r\n    public updateCachedItems() {\r\n        // Notify the user with the items that changed since the previous snapshot\r\n        this.triggerOnChange(null);\r\n        this.gridsterOptions.responsiveOptions.forEach((options: IGridsterOptions) => {\r\n            this.triggerOnChange(options.breakpoint);\r\n        });\r\n\r\n        this.copyItems();\r\n    }\r\n\r\n    private triggerOnChange(breakpoint?: string) {\r\n        const items = breakpoint ? this._itemsMap[breakpoint] : this._items;\r\n        const changeItems = this.gridList.getChangedItems(items || [], breakpoint);\r\n\r\n        changeItems\r\n            .filter((itemChange: any) => {\r\n                return itemChange.item.itemComponent;\r\n            })\r\n            .forEach((itemChange: any) => {\r\n\r\n                if (itemChange.changes.indexOf('x') >= 0) {\r\n                    itemChange.item.triggerChangeX(breakpoint);\r\n                }\r\n                if (itemChange.changes.indexOf('y') >= 0) {\r\n                    itemChange.item.triggerChangeY(breakpoint);\r\n                }\r\n                if (itemChange.changes.indexOf('w') >= 0) {\r\n                    itemChange.item.triggerChangeW(breakpoint);\r\n                }\r\n                if (itemChange.changes.indexOf('h') >= 0) {\r\n                    itemChange.item.triggerChangeH(breakpoint);\r\n                }\r\n                // should be called only once (not for each breakpoint)\r\n                itemChange.item.itemComponent.change.emit({\r\n                    item: itemChange.item,\r\n                    oldValues: itemChange.oldValues || {},\r\n                    isNew: itemChange.isNew,\r\n                    changes: itemChange.changes,\r\n                    breakpoint: breakpoint\r\n                });\r\n            });\r\n    }\r\n\r\n    private removePositionHighlight() {\r\n        this.$positionHighlight.style.display = 'none';\r\n    }\r\n\r\n}\r\n"]}