{"version":3,"file":"GridsterOptions.js","sourceRoot":"","sources":["../../../../../../projects/angular2gridster/src/lib/GridsterOptions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,GAAG,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAIzE;IAuCI,yBAAY,MAAwB;QAApC,iBAYC;QAtCD,aAAQ,GAAqB;YACzB,KAAK,EAAE,CAAC;YACR,SAAS,EAAE,YAAY;YACvB,gBAAgB,EAAE,CAAC;YACnB,MAAM,EAAE,KAAK;YACb,cAAc,EAAE,IAAI;YACpB,eAAe,EAAE,KAAK;YACtB,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,KAAK;YAChB,gBAAgB,EAAE,KAAK;YACvB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,SAAS;SACvB,CAAC;QAIF,sBAAiB,GAA4B,EAAE,CAAC;QAGhD,mBAAc,GAA8B;YACxC,EAAE,EAAE,GAAG;YACP,EAAE,EAAE,GAAG;YACP,EAAE,EAAE,GAAG;YACP,EAAE,EAAE,IAAI,CAAC,cAAc;SAC1B,CAAC;QAGE,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAE3B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC;QAEtF,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,CACtB,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,EAC3E,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CACvC,YAAY,CAAC,MAAM,CAAC,kBAAkB,IAAI,CAAC,CAAC,EAC5C,GAAG,CAAC,UAAC,KAAY,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,EAA5D,CAA4D,CAAC,CACtF,CACJ,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,UAAC,OAAY,IAAK,OAAA,OAAO,CAAC,QAAQ,EAAhB,CAAgB,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,2CAAiB,GAAjB,UAAkB,KAAa;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,OAAO,GAAqB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAEpF,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC;YAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC;gBAC9C,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC;YACD,CAAC,EAAE,CAAC;QACR,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEO,iDAAuB,GAA/B,UAAgC,iBAA0C;QAA1E,iBAYC;QAXG,MAAM,CAAC,iBAAiB;aAEnB,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,UAAU,EAAlB,CAAkB,CAAC;aAErC,GAAG,CAAC,UAAC,OAAO;YACT,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;gBACjB,QAAQ,EAAE,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;aACzD,EAAE,OAAO,CAAC,CAAC;QAChB,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAA7B,CAA6B,CAAC;aACnD,GAAG,CAAC,UAAC,OAAO,IAAK,OAAkB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAI,CAAC,QAAQ,EAAE,KAAI,CAAC,YAAY,EAAE,OAAO,CAAC,EAA9E,CAA8E,CAAC,CAAC;IAC1G,CAAC;IACL,sBAAC;AAAD,CAAC,AAhFD,IAgFC","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { debounceTime, map, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { IGridsterOptions } from './IGridsterOptions';\r\n\r\nexport class GridsterOptions {\r\n    direction: string;\r\n    lanes: number;\r\n    widthHeightRatio: number;\r\n    heightToFontSizeRatio: number;\r\n    responsiveView: boolean;\r\n    responsiveSizes: boolean;\r\n    dragAndDrop: boolean;\r\n    resizable: boolean;\r\n    shrink: boolean;\r\n    minWidth: number;\r\n    useCSSTransforms: boolean;\r\n\r\n    defaults: IGridsterOptions = {\r\n        lanes: 5,\r\n        direction: 'horizontal',\r\n        widthHeightRatio: 1,\r\n        shrink: false,\r\n        responsiveView: true,\r\n        responsiveSizes: false,\r\n        dragAndDrop: true,\r\n        resizable: false,\r\n        useCSSTransforms: false,\r\n        floating: true,\r\n        tolerance: 'pointer'\r\n    };\r\n\r\n    change: Observable<IGridsterOptions>;\r\n\r\n    responsiveOptions: Array<IGridsterOptions> = [];\r\n    basicOptions: IGridsterOptions;\r\n\r\n    breakpointsMap: {[index: string]: number} = {\r\n        sm: 576, // Small devices\r\n        md: 768, // Medium devices\r\n        lg: 992, // Large devices\r\n        xl: 1200 // Extra large\r\n    };\r\n\r\n    constructor(config: IGridsterOptions) {\r\n        this.basicOptions = config;\r\n\r\n        this.responsiveOptions = this.extendResponsiveOptions(config.responsiveOptions || []);\r\n\r\n        this.change = Observable.merge(\r\n                Observable.of(this.getOptionsByWidth(document.documentElement.clientWidth)),\r\n                Observable.fromEvent(window, 'resize').pipe(\r\n                    debounceTime(config.responsiveDebounce || 0),\r\n                    map((event: Event) => this.getOptionsByWidth(document.documentElement.clientWidth))\r\n                )\r\n            ).pipe(distinctUntilChanged(null, (options: any) => options.minWidth));\r\n    }\r\n\r\n    getOptionsByWidth(width: number): IGridsterOptions {\r\n        let i = 0;\r\n        let options: IGridsterOptions = Object.assign({}, this.defaults, this.basicOptions);\r\n\r\n        while (this.responsiveOptions[i]) {\r\n            if (this.responsiveOptions[i].minWidth <= width) {\r\n                options = this.responsiveOptions[i];\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    private extendResponsiveOptions(responsiveOptions: Array<IGridsterOptions>): Array<IGridsterOptions> {\r\n        return responsiveOptions\r\n            // responsive options are valid only with \"breakpoint\" property\r\n            .filter(options => options.breakpoint)\r\n            // set default minWidth if not given\r\n            .map((options) => {\r\n                return Object.assign({\r\n                    minWidth: this.breakpointsMap[options.breakpoint] || 0\r\n                }, options);\r\n            })\r\n            .sort((curr, next) => curr.minWidth - next.minWidth)\r\n            .map((options) => <IGridsterOptions>Object.assign({}, this.defaults, this.basicOptions, options));\r\n    }\r\n}\r\n"]}