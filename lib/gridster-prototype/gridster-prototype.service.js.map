{"version":3,"file":"gridster-prototype.service.js","sourceRoot":"","sources":["../../../../../../../projects/angular2gridster/src/lib/gridster-prototype/gridster-prototype.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { takeUntil, switchMap, map, scan, filter, share, tap } from 'rxjs/operators';\r\n\r\nimport { GridsterService } from '../gridster.service';\r\nimport { GridsterItemPrototypeDirective } from './gridster-item-prototype.directive';\r\nimport { utils } from '../utils/utils';\r\nimport {DraggableEvent} from '../utils/DraggableEvent';\r\n\r\n@Injectable()\r\nexport class GridsterPrototypeService {\r\n\r\n    private isDragging = false;\r\n\r\n    private dragSubject = new Subject<any>();\r\n\r\n    private dragStartSubject = new Subject<any>();\r\n\r\n    private dragStopSubject = new Subject<any>();\r\n\r\n    constructor() {}\r\n\r\n    observeDropOver (gridster: GridsterService) {\r\n        return this.dragStopSubject.pipe(\r\n            filter((data: any) => {\r\n                const gridsterEl = gridster.gridsterComponent.$element;\r\n                const isOverNestedGridster = [].slice.call(gridsterEl.querySelectorAll('gridster'))\r\n                    .reduce((isOverGridster: boolean, nestedGridsterEl: HTMLElement) => {\r\n                        return isOverGridster ||\r\n                            this.isOverGridster(data.item, nestedGridsterEl, data.event, gridster.options);\r\n                    }, false);\r\n\r\n                if (isOverNestedGridster) {\r\n                    return false;\r\n                }\r\n\r\n                return this.isOverGridster(data.item, gridsterEl, data.event, gridster.options);\r\n            }),\r\n            tap((data: any) => {\r\n                // TODO: what we should provide as a param?\r\n                // prototype.drop.emit({item: prototype.item});\r\n                data.item.onDrop(gridster);\r\n            })\r\n        );\r\n    }\r\n\r\n    observeDropOut (gridster: GridsterService) {\r\n        return this.dragStopSubject.pipe(\r\n            filter((data: any) => {\r\n                const gridsterEl = gridster.gridsterComponent.$element;\r\n\r\n                return !this.isOverGridster(data.item, gridsterEl, data.event, gridster.options);\r\n            }),\r\n            tap((data: any) => {\r\n                // TODO: what we should provide as a param?\r\n                data.item.onCancel();\r\n            })\r\n        );\r\n    }\r\n\r\n    observeDragOver(gridster: GridsterService): {\r\n        dragOver: Observable<GridsterItemPrototypeDirective>,\r\n        dragEnter: Observable<GridsterItemPrototypeDirective>,\r\n        dragOut: Observable<GridsterItemPrototypeDirective>\r\n    } {\r\n        const over = this.dragSubject.pipe(\r\n            map((data: any) => {\r\n                const gridsterEl = gridster.gridsterComponent.$element;\r\n\r\n                return {\r\n                  item: data.item,\r\n                  event: data.event,\r\n                  isOver: this.isOverGridster(data.item, gridsterEl, data.event, gridster.options),\r\n                  isDrop: false\r\n                };\r\n            })\r\n        );\r\n\r\n        const drop = this.dragStopSubject.pipe(\r\n            map((data: any) => {\r\n                const gridsterEl = gridster.gridsterComponent.$element;\r\n\r\n                return {\r\n                    item: data.item,\r\n                    event: data.event,\r\n                    isOver: this.isOverGridster(data.item, gridsterEl, data.event, gridster.options),\r\n                    isDrop: true\r\n                };\r\n            })\r\n        );\r\n\r\n        const dragExt = Observable.merge(\r\n                // dragStartSubject is connected in case when item prototype is placed above gridster\r\n                // and drag enter is not fired\r\n                this.dragStartSubject.pipe(map(() => ({ item: null, isOver: false, isDrop: false }))),\r\n                over,\r\n                drop\r\n            ).pipe(\r\n                scan((prev: any, next: any) => {\r\n                    return {\r\n                        item: next.item,\r\n                        event: next.event,\r\n                        isOver: next.isOver,\r\n                        isEnter: prev.isOver === false && next.isOver === true,\r\n                        isOut: prev.isOver === true && next.isOver === false && !prev.isDrop,\r\n                        isDrop: next.isDrop\r\n                    };\r\n                }),\r\n                filter((data: any) => {\r\n                    return !data.isDrop;\r\n                }),\r\n                share()\r\n            );\r\n\r\n        const dragEnter = this.createDragEnterObservable(dragExt, gridster);\r\n        const dragOut = this.createDragOutObservable(dragExt, gridster);\r\n        const dragOver = dragEnter\r\n            .pipe(\r\n                switchMap(() => this.dragSubject.pipe(takeUntil(dragOut))),\r\n                map((data: any) => data.item)\r\n            );\r\n\r\n        return { dragEnter, dragOut, dragOver };\r\n    }\r\n\r\n    dragItemStart(item: GridsterItemPrototypeDirective, event: DraggableEvent) {\r\n        this.isDragging = true;\r\n        this.dragStartSubject.next({ item, event });\r\n    }\r\n\r\n    dragItemStop(item: GridsterItemPrototypeDirective, event: DraggableEvent) {\r\n        this.isDragging = false;\r\n        this.dragStopSubject.next({ item, event });\r\n    }\r\n\r\n    updatePrototypePosition(item: GridsterItemPrototypeDirective, event: DraggableEvent) {\r\n        this.dragSubject.next({ item, event });\r\n    }\r\n\r\n    /**\r\n     * Creates observable that is fired on dragging over gridster container.\r\n     */\r\n    public createDragOverObservable (\r\n        dragIsOver: Observable<{item: GridsterItemPrototypeDirective, isOver: boolean}>,\r\n        gridster: GridsterService\r\n    ) {\r\n        return dragIsOver.pipe(\r\n            filter((data: any) => data.isOver && !data.isEnter && !data.isOut),\r\n            map((data: any): GridsterItemPrototypeDirective => data.item),\r\n            tap((item: GridsterItemPrototypeDirective) => item.onOver(gridster))\r\n        );\r\n    }\r\n    /**\r\n     * Creates observable that is fired on drag enter gridster container.\r\n     */\r\n    private createDragEnterObservable (\r\n        dragIsOver: Observable<{item: GridsterItemPrototypeDirective, isOver: boolean}>,\r\n        gridster: GridsterService\r\n    ) {\r\n        return dragIsOver.pipe(\r\n            filter((data: any) => data.isEnter),\r\n            map((data: any): GridsterItemPrototypeDirective => data.item),\r\n            tap((item: GridsterItemPrototypeDirective) => item.onEnter(gridster))\r\n        );\r\n    }\r\n    /**\r\n     * Creates observable that is fired on drag out gridster container.\r\n     */\r\n    private createDragOutObservable (\r\n        dragIsOver: Observable<{item: GridsterItemPrototypeDirective,\r\n        isOver: boolean}>,\r\n        gridster: GridsterService\r\n    ) {\r\n        return dragIsOver.pipe(\r\n            filter((data: any) => data.isOut),\r\n            map((data: any): GridsterItemPrototypeDirective => data.item),\r\n            tap((item: GridsterItemPrototypeDirective) => item.onOut(gridster))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks whether \"element\" position fits inside \"containerEl\" position.\r\n     * It checks if \"element\" is totally covered by \"containerEl\" area.\r\n     */\r\n    private isOverGridster(item: GridsterItemPrototypeDirective, gridsterEl: HTMLElement, event: any, options: any): boolean {\r\n        const el = item.$element;\r\n        const parentItem = <HTMLElement>gridsterEl.parentElement &&\r\n            <HTMLElement>gridsterEl.parentElement.closest('gridster-item');\r\n\r\n        if (parentItem) {\r\n            return this.isOverGridster(item, parentItem, event, options);\r\n        }\r\n\r\n        switch (options.tolerance) {\r\n            case 'fit':\r\n                return utils.isElementFitContainer(el, gridsterEl);\r\n            case 'intersect':\r\n                return utils.isElementIntersectContainer(el, gridsterEl);\r\n            case 'touch':\r\n                return utils.isElementTouchContainer(el, gridsterEl);\r\n            default:\r\n                return utils.isCursorAboveElement(event, gridsterEl);\r\n        }\r\n    }\r\n}\r\n"]}